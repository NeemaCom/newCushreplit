Design, define, and securely implement the necessary API endpoints and associated logic for email verification during sign-up and a robust "Forgot Password" functionality for the Cush platform. Prioritize security, scalability, and adherence to best practices as if you were developing for a FAANG product.

Core Requirements:
Email Verification for Sign-Up:

Endpoint Design: Define clear, RESTful API endpoints for:
Initiating email verification upon user registration.
Handling the verification token (e.g., when a user clicks a link in the email).
Resending the verification email.
Secure Token Generation: Implement a robust, time-limited, and single-use token generation mechanism (e.g., JWT with short expiry, cryptographically secure random strings). The token must be securely stored and invalidated after use.
Email Content: Define the structure and essential content for the verification email (e.g., clear call-to-action button/link, expiration notice, contact information).
Error Handling: Specify clear error codes and messages for scenarios like expired tokens, invalid tokens, already verified accounts, etc.
User Experience Flow: Outline the user journey from registration submission to successful email verification and account activation.
Forgot Password Functionality:

Endpoint Design: Define clear, RESTful API endpoints for:
Requesting a password reset (input: user's email).
Validating the reset token and setting a new password (input: token, new password, confirm new password).
Secure Token Generation: Similar to email verification, generate a secure, time-limited, single-use reset token. This token should not expose any user-identifiable information.
Email Content: Define the structure and essential content for the password reset email (e.g., clear call-to-action, expiration notice, security warnings, instructions for suspicious activity).
Password Complexity: Enforce strong password policies (minimum length, character types, exclusion of common passwords).
Rate Limiting: Implement aggressive rate limiting on both the "request password reset" and "reset password" endpoints to mitigate brute-force and enumeration attacks.
Error Handling: Specify clear, generic error messages to prevent user enumeration (e.g., "If an account associated with this email exists, a reset link has been sent").
User Experience Flow: Outline the user journey from initiating a password reset request to successfully setting a new password. After a successful password reset, force re-authentication.
Security and Best Practices (FAANG Standard):
API Security: All new endpoints must be protected by appropriate authentication (where applicable) and authorization checks. Use secure communication protocols (HTTPS/TLS 1.3).
Input Validation: Rigorous server-side input validation and sanitization for all incoming request parameters (e.g., email format, password strength, token format).
Rate Limiting: Implement robust rate limiting on all new and relevant existing authentication/account management endpoints to prevent abuse (e.g., brute-force attacks, denial of service).
Logging & Monitoring: Ensure comprehensive logging of all relevant events (e.g., verification email sent, password reset requested, successful password change) with appropriate security alerts for suspicious activity.
Sensitive Data Handling: Ensure tokens and other sensitive data are handled securely (e.g., not logged in plain text, securely transmitted).
Idempotency: Consider idempotency for relevant API calls where a client might retry requests.
API Documentation: Generate clear, comprehensive API documentation (e.g., OpenAPI/Swagger specifications) for all new endpoints, including request/response schemas, error codes, and security requirements.
Scalability & Performance: Design endpoints for high availability and low latency, considering potential future traffic spikes.
Error Messages: Provide informative but generic error messages to users to avoid revealing sensitive system details or aiding attackers.
Output Requirements:
Detailed API Endpoint Specifications: For each new endpoint (e.g., /api/auth/verify-email, /api/auth/resend-verification, /api/auth/forgot-password, /api/auth/reset-password):
HTTP Method (GET/POST)
URL Path
Request Body/Query Parameters (with data types, constraints, and examples)
Response Body (success and error states, with examples)
Authentication/Authorization requirements
Rate limiting specifications
Token Management Strategy: Detail for both email verification and password reset tokens (generation, storage, expiry, invalidation).
Email Template Structures: Pseudo-code or detailed descriptions for the content of the verification and password reset emails.
Security Considerations & Mitigations: Explicitly list potential attack vectors for these functionalities and the implemented countermeasures.
High-Level User Flow Diagrams: For both email verification and forgot password, showing interactions between the client, API, and email service.